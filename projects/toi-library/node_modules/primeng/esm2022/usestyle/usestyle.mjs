import { DOCUMENT } from '@angular/common';
import { Injectable, inject } from '@angular/core';
import { setAttribute, setAttributes } from '@primeuix/utils';
import * as i0 from "@angular/core";
let _id = 0;
export class UseStyle {
    document = inject(DOCUMENT);
    use(css, options = {}) {
        let isLoaded = false;
        let cssRef = css;
        let styleRef = null;
        const { immediate = true, manual = false, name = `style_${++_id}`, id = undefined, media = undefined, nonce = undefined, first = false, props = {} } = options;
        if (!this.document)
            return;
        styleRef = this.document.querySelector(`style[data-primeng-style-id="${name}"]`) || (id && this.document.getElementById(id)) || this.document.createElement('style');
        if (!styleRef.isConnected) {
            cssRef = css;
            setAttributes(styleRef, {
                type: 'text/css',
                media,
                nonce
            });
            const HEAD = this.document.head;
            first && HEAD.firstChild ? HEAD.insertBefore(styleRef, HEAD.firstChild) : HEAD.appendChild(styleRef);
            setAttribute(styleRef, 'data-primeng-style-id', name);
        }
        if (styleRef.textContent !== cssRef) {
            styleRef.textContent = cssRef;
        }
        return {
            id,
            name,
            el: styleRef,
            css: cssRef
        };
    }
    static ɵfac = function UseStyle_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || UseStyle)(); };
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UseStyle, factory: UseStyle.ɵfac, providedIn: 'root' });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(UseStyle, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlc3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXNlc3R5bGUvdXNlc3R5bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRTlELElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztBQUdaLE1BQU0sT0FBTyxRQUFRO0lBQ2pCLFFBQVEsR0FBYSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdEMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFlLEVBQUU7UUFDdEIsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFcEIsTUFBTSxFQUFFLFNBQVMsR0FBRyxJQUFJLEVBQUUsTUFBTSxHQUFHLEtBQUssRUFBRSxJQUFJLEdBQUcsU0FBUyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxTQUFTLEVBQUUsS0FBSyxHQUFHLFNBQVMsRUFBRSxLQUFLLEdBQUcsU0FBUyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEVBQUUsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUUvSixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFPO1FBQzNCLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXJLLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDeEIsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUNiLGFBQWEsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3BCLElBQUksRUFBRSxVQUFVO2dCQUNoQixLQUFLO2dCQUNMLEtBQUs7YUFDUixDQUFDLENBQUM7WUFFSCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUVoQyxLQUFLLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JHLFlBQVksQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUQsQ0FBQztRQUVELElBQUksUUFBUSxDQUFDLFdBQVcsS0FBSyxNQUFNLEVBQUUsQ0FBQztZQUNsQyxRQUFRLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQztRQUNsQyxDQUFDO1FBRUQsT0FBTztZQUNILEVBQUU7WUFDRixJQUFJO1lBQ0osRUFBRSxFQUFFLFFBQVE7WUFDWixHQUFHLEVBQUUsTUFBTTtTQUNkLENBQUM7SUFDTixDQUFDO2tHQXJDUSxRQUFRO2dFQUFSLFFBQVEsV0FBUixRQUFRLG1CQURLLE1BQU07O2lGQUNuQixRQUFRO2NBRHBCLFVBQVU7ZUFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHNldEF0dHJpYnV0ZSwgc2V0QXR0cmlidXRlcyB9IGZyb20gJ0BwcmltZXVpeC91dGlscyc7XG5cbmxldCBfaWQgPSAwO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFVzZVN0eWxlIHtcbiAgICBkb2N1bWVudDogRG9jdW1lbnQgPSBpbmplY3QoRE9DVU1FTlQpO1xuXG4gICAgdXNlKGNzcywgb3B0aW9uczogYW55ID0ge30pIHtcbiAgICAgICAgbGV0IGlzTG9hZGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBjc3NSZWYgPSBjc3M7XG4gICAgICAgIGxldCBzdHlsZVJlZiA9IG51bGw7XG5cbiAgICAgICAgY29uc3QgeyBpbW1lZGlhdGUgPSB0cnVlLCBtYW51YWwgPSBmYWxzZSwgbmFtZSA9IGBzdHlsZV8keysrX2lkfWAsIGlkID0gdW5kZWZpbmVkLCBtZWRpYSA9IHVuZGVmaW5lZCwgbm9uY2UgPSB1bmRlZmluZWQsIGZpcnN0ID0gZmFsc2UsIHByb3BzID0ge30gfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCF0aGlzLmRvY3VtZW50KSByZXR1cm47XG4gICAgICAgIHN0eWxlUmVmID0gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBzdHlsZVtkYXRhLXByaW1lbmctc3R5bGUtaWQ9XCIke25hbWV9XCJdYCkgfHwgKGlkICYmIHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB8fCB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgICAgICAgaWYgKCFzdHlsZVJlZi5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgY3NzUmVmID0gY3NzO1xuICAgICAgICAgICAgc2V0QXR0cmlidXRlcyhzdHlsZVJlZiwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2NzcycsXG4gICAgICAgICAgICAgICAgbWVkaWEsXG4gICAgICAgICAgICAgICAgbm9uY2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBIRUFEID0gdGhpcy5kb2N1bWVudC5oZWFkO1xuXG4gICAgICAgICAgICBmaXJzdCAmJiBIRUFELmZpcnN0Q2hpbGQgPyBIRUFELmluc2VydEJlZm9yZShzdHlsZVJlZiwgSEVBRC5maXJzdENoaWxkKSA6IEhFQUQuYXBwZW5kQ2hpbGQoc3R5bGVSZWYpO1xuICAgICAgICAgICAgc2V0QXR0cmlidXRlKHN0eWxlUmVmLCAnZGF0YS1wcmltZW5nLXN0eWxlLWlkJywgbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3R5bGVSZWYudGV4dENvbnRlbnQgIT09IGNzc1JlZikge1xuICAgICAgICAgICAgc3R5bGVSZWYudGV4dENvbnRlbnQgPSBjc3NSZWY7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZWw6IHN0eWxlUmVmLFxuICAgICAgICAgICAgY3NzOiBjc3NSZWZcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXX0=